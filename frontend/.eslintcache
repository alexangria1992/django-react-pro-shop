[{"D:\\Django-React-Pro-Shop\\frontend\\src\\index.js":"1","D:\\Django-React-Pro-Shop\\frontend\\src\\App.js":"2","D:\\Django-React-Pro-Shop\\frontend\\src\\reportWebVitals.js":"3","D:\\Django-React-Pro-Shop\\frontend\\src\\components\\Header.js":"4","D:\\Django-React-Pro-Shop\\frontend\\src\\components\\Footer.js":"5","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\HomeScreen.js":"6","D:\\Django-React-Pro-Shop\\frontend\\src\\products.js":"7","D:\\Django-React-Pro-Shop\\frontend\\src\\components\\Product.js":"8","D:\\Django-React-Pro-Shop\\frontend\\src\\components\\Rating.js":"9","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\ProductScreen.js":"10","D:\\Django-React-Pro-Shop\\frontend\\src\\store.js":"11","D:\\Django-React-Pro-Shop\\frontend\\src\\reducers\\productReducers.js":"12","D:\\Django-React-Pro-Shop\\frontend\\src\\constants\\productConstants.js":"13","D:\\Django-React-Pro-Shop\\frontend\\src\\actions\\productActions.js":"14","D:\\Django-React-Pro-Shop\\frontend\\src\\components\\Loader.js":"15","D:\\Django-React-Pro-Shop\\frontend\\src\\components\\Message.js":"16","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\CartScreen.js":"17","D:\\Django-React-Pro-Shop\\frontend\\src\\reducers\\cartReducers.js":"18","D:\\Django-React-Pro-Shop\\frontend\\src\\constants\\cartConstants.js":"19","D:\\Django-React-Pro-Shop\\frontend\\src\\actions\\cartActions.js":"20","D:\\Django-React-Pro-Shop\\frontend\\src\\reducers\\userReducers.js":"21","D:\\Django-React-Pro-Shop\\frontend\\src\\constants\\userConstants.js":"22","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\LoginScreen.js":"23","D:\\Django-React-Pro-Shop\\frontend\\src\\actions\\userActions.js":"24","D:\\Django-React-Pro-Shop\\frontend\\src\\components\\FormContainer.js":"25","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\RegisterScreen.js":"26","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\ProfileScreen.js":"27","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\ShippingScreen.js":"28","D:\\Django-React-Pro-Shop\\frontend\\src\\components\\CheckoutSteps.js":"29","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\PaymentScreen.js":"30","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\PlaceOrderScreen.js":"31","D:\\Django-React-Pro-Shop\\frontend\\src\\reducers\\orderReducers.js":"32","D:\\Django-React-Pro-Shop\\frontend\\src\\constants\\orderConstants.js":"33","D:\\Django-React-Pro-Shop\\frontend\\src\\actions\\orderActions.js":"34","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\OrderScreen.js":"35","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\UserListScreen.js":"36","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\UserEditScreen.js":"37","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\ProductListScreen.js":"38","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\ProductEditScreen.js":"39","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\OrderListScreen.js":"40","D:\\Django-React-Pro-Shop\\frontend\\src\\components\\SearchBox.js":"41","D:\\Django-React-Pro-Shop\\frontend\\src\\components\\Paginate.js":"42","D:\\Django-React-Pro-Shop\\frontend\\src\\components\\ProductCarousel.js":"43"},{"size":593,"mtime":1612340089454,"results":"44","hashOfConfig":"45"},{"size":2257,"mtime":1614043324158,"results":"46","hashOfConfig":"45"},{"size":362,"mtime":499162500000,"results":"47","hashOfConfig":"45"},{"size":2871,"mtime":1614135524977,"results":"48","hashOfConfig":"45"},{"size":374,"mtime":1612168763130,"results":"49","hashOfConfig":"45"},{"size":1507,"mtime":1614156764476,"results":"50","hashOfConfig":"45"},{"size":2497,"mtime":1612232288624,"results":"51","hashOfConfig":"45"},{"size":1059,"mtime":1612235323063,"results":"52","hashOfConfig":"45"},{"size":1305,"mtime":1612232401517,"results":"53","hashOfConfig":"45"},{"size":9402,"mtime":1614118052982,"results":"54","hashOfConfig":"45"},{"size":2457,"mtime":1614143498557,"results":"55","hashOfConfig":"45"},{"size":4246,"mtime":1614143433047,"results":"56","hashOfConfig":"45"},{"size":1532,"mtime":1614143196628,"results":"57","hashOfConfig":"45"},{"size":6350,"mtime":1614154706457,"results":"58","hashOfConfig":"45"},{"size":425,"mtime":1612343367936,"results":"59","hashOfConfig":"45"},{"size":237,"mtime":1612343496834,"results":"60","hashOfConfig":"45"},{"size":4727,"mtime":1612486499123,"results":"61","hashOfConfig":"45"},{"size":1668,"mtime":1613551935566,"results":"62","hashOfConfig":"45"},{"size":295,"mtime":1613530521867,"results":"63","hashOfConfig":"45"},{"size":1370,"mtime":1613525839121,"results":"64","hashOfConfig":"45"},{"size":5344,"mtime":1613888798701,"results":"65","hashOfConfig":"45"},{"size":1518,"mtime":1613873186179,"results":"66","hashOfConfig":"45"},{"size":2519,"mtime":1613081531930,"results":"67","hashOfConfig":"45"},{"size":8924,"mtime":1613891110699,"results":"68","hashOfConfig":"45"},{"size":390,"mtime":1612999180111,"results":"69","hashOfConfig":"45"},{"size":4200,"mtime":1613099068248,"results":"70","hashOfConfig":"45"},{"size":6944,"mtime":1613872934548,"results":"71","hashOfConfig":"45"},{"size":3331,"mtime":1613378006491,"results":"72","hashOfConfig":"45"},{"size":1502,"mtime":1613378004796,"results":"73","hashOfConfig":"45"},{"size":1750,"mtime":1613525720068,"results":"74","hashOfConfig":"45"},{"size":6558,"mtime":1613602597072,"results":"75","hashOfConfig":"45"},{"size":4416,"mtime":1614049466455,"results":"76","hashOfConfig":"45"},{"size":1266,"mtime":1614049355811,"results":"77","hashOfConfig":"45"},{"size":6391,"mtime":1614050805291,"results":"78","hashOfConfig":"45"},{"size":9314,"mtime":1614051741896,"results":"79","hashOfConfig":"45"},{"size":3118,"mtime":1613946285315,"results":"80","hashOfConfig":"45"},{"size":3918,"mtime":1613965427496,"results":"81","hashOfConfig":"45"},{"size":4476,"mtime":1614141965631,"results":"82","hashOfConfig":"45"},{"size":8134,"mtime":1613986674521,"results":"83","hashOfConfig":"45"},{"size":3193,"mtime":1614043791047,"results":"84","hashOfConfig":"45"},{"size":971,"mtime":1614138816957,"results":"85","hashOfConfig":"45"},{"size":1051,"mtime":1614141062027,"results":"86","hashOfConfig":"45"},{"size":1400,"mtime":1614156591327,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"1y2g2su",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"90"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"90"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"90"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"90"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"90"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"90"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"90"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"90"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"90"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"90"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"90"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"90"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"90"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"90"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Django-React-Pro-Shop\\frontend\\src\\index.js",[],["190","191"],"D:\\Django-React-Pro-Shop\\frontend\\src\\App.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\reportWebVitals.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\components\\Header.js",["192"],"import React from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {Navbar, Nav, Container, Row, NavDropdown} from 'react-bootstrap'\r\nimport {LinkContainer} from 'react-router-bootstrap'\r\nimport SearchBox from './SearchBox'\r\nimport {logout} from '../actions/userActions'\r\n\r\nfunction Header()\r\n{\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {userInfo} = userLogin\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler = () =>\r\n    {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return (\r\n        <header>\r\n           <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\r\n               <Container>\r\n                   <LinkContainer to='/'>\r\n                       <Navbar.Brand >ProShop</Navbar.Brand>\r\n                   </LinkContainer>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <SearchBox/>\r\n                    <Nav className=\"mr-auto\">\r\n\r\n                    <LinkContainer to='/cart'>\r\n                        <Nav.Link><i className=\"fa fa-shopping-cart\"></i>Cart</Nav.Link>\r\n                    </LinkContainer>\r\n\r\n                    {userInfo ? (\r\n                        <NavDropdown title={userInfo.name} id='username'>\r\n                            <LinkContainer to='/profile'>\r\n                                <NavDropdown.Item>Profile</NavDropdown.Item>\r\n                            </LinkContainer>\r\n\r\n                            <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                    ) : (\r\n                        <LinkContainer to='/login'>\r\n                        <Nav.Link><i class=\"fa fa-user\" aria-hidden=\"true\"></i>Login</Nav.Link>\r\n                    </LinkContainer>\r\n                    )}\r\n\r\n                    {userInfo && userInfo.isAdmin && (\r\n                        \r\n                        <NavDropdown title='Admin' id='adminmenu'>\r\n                            <LinkContainer to='/admin/userlist'>\r\n                                <NavDropdown.Item>Users</NavDropdown.Item>\r\n                            </LinkContainer>\r\n\r\n                            <LinkContainer to='/admin/productlist'>\r\n                                <NavDropdown.Item>Products</NavDropdown.Item>\r\n                            </LinkContainer>\r\n\r\n                            <LinkContainer to='/admin/orderlist'>\r\n                                <NavDropdown.Item>Orders</NavDropdown.Item>\r\n                            </LinkContainer>\r\n                        </NavDropdown>\r\n                    )}\r\n\r\n                    \r\n                    </Nav>\r\n             \r\n                </Navbar.Collapse>\r\n                </Container>\r\n                </Navbar>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","D:\\Django-React-Pro-Shop\\frontend\\src\\components\\Footer.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\HomeScreen.js",["193"],"D:\\Django-React-Pro-Shop\\frontend\\src\\products.js",[],["194","195"],"D:\\Django-React-Pro-Shop\\frontend\\src\\components\\Product.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\components\\Rating.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\ProductScreen.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\store.js",["196"],"import {createStore, combineReducers, applyMiddleware} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport {productListReducer,\r\n     productDetailsReducer,\r\n      productDeleteReducer,\r\n      productUpdateReducer,\r\n    productCreateReducer,\r\n    productReviewCreateReducer,\r\n    productTopRatedReducer} from './reducers/productReducers'\r\nimport {cartReducer} from './reducers/cartReducers'\r\nimport {\r\n    userLoginReducer, \r\n    userRegisterReducer, \r\n    userDetailsReducer, \r\n    userUpdateProfileReducer, \r\n    userListReducer, \r\n    userDeleteReducer, \r\n    userUpdateReducer} from './reducers/userReducers'\r\nimport {\r\n    orderCreateReducer, \r\n    orderDetailsReducer, \r\n    orderPayReducer, \r\n    orderListMyReducer,\r\n    orderListReducer,\r\n    orderDeliverReducer, \r\n\r\n\r\n} from './reducers/orderReducers'\r\n\r\nconst reducer = combineReducers({\r\n    productList: productListReducer,\r\n    productDetails: productDetailsReducer,\r\n    productDelete: productDeleteReducer,\r\n    productCreate: productCreateReducer,\r\n    productUpdate: productUpdateReducer,\r\n    productReviewCreate: productReviewCreateReducer,\r\n    productTopRated: productTopRatedReducer,\r\n    cart: cartReducer,\r\n    userLogin: userLoginReducer,\r\n    userRegister: userRegisterReducer,\r\n    userDetails: userDetailsReducer,\r\n    userUpdateProfile: userUpdateProfileReducer,\r\n    userList: userListReducer,\r\n    userDelete: userDeleteReducer,\r\n    userUpdate: userUpdateReducer,\r\n    orderCreate: orderCreateReducer,\r\n    orderDetails: orderDetailsReducer,\r\n    orderPay: orderPayReducer,\r\n    orderDeliver: orderDeliverReducer,\r\n    orderListMy: orderListMyReducer,\r\n    orderList: orderListReducer\r\n    \r\n})\r\n\r\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : []\r\n\r\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null\r\n\r\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {}\r\n\r\nconst initialState = {\r\n    cart:{cartItems: cartItemsFromStorage,\r\n        shippingAddress: shippingAddressFromStorage\r\n    },\r\n    userLogin: {userInfo: userInfoFromStorage},\r\n    \r\n}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunk)))\r\n\r\nexport default store ","D:\\Django-React-Pro-Shop\\frontend\\src\\reducers\\productReducers.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\constants\\productConstants.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\actions\\productActions.js",["197"],"D:\\Django-React-Pro-Shop\\frontend\\src\\components\\Loader.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\components\\Message.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\CartScreen.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\reducers\\cartReducers.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\constants\\cartConstants.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\actions\\cartActions.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\reducers\\userReducers.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\constants\\userConstants.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\LoginScreen.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\actions\\userActions.js",["198"],"import axios from 'axios'\r\nimport {\r\n    USER_LOGIN_REQUEST, \r\n    USER_LOGIN_SUCCESS, \r\n    USER_LOGIN_FAIL, \r\n\r\n    USER_LOGOUT,\r\n\r\n    USER_REGISTER_REQUEST, \r\n    USER_REGISTER_SUCCESS, \r\n    USER_REGISTER_FAIL,\r\n\r\n    USER_DETAILS_REQUEST, \r\n    USER_DETAILS_SUCCESS, \r\n    USER_DETAILS_FAIL, \r\n    USER_DETAILS_RESET,\r\n\r\n    USER_UPDATE_PROFILE_REQUEST, \r\n    USER_UPDATE_PROFILE_SUCCESS, \r\n    USER_UPDATE_PROFILE_FAIL, \r\n    USER_UPDATE_PROFILE_RESET, \r\n\r\n    USER_LIST_REQUEST, \r\n    USER_LIST_SUCCESS, \r\n    USER_LIST_FAIL, \r\n    USER_LIST_RESET, \r\n\r\n    USER_DELETE_REQUEST, \r\n    USER_DELETE_SUCCESS, \r\n    USER_DELETE_FAIL,\r\n\r\n    USER_UPDATE_REQUEST, \r\n    USER_UPDATE_SUCCESS, \r\n    USER_UPDATE_FAIL, \r\n \r\n    } from '../constants/userConstants.js'\r\n\r\n    import {    \r\n        ORDER_LIST_MY_RESET,}\r\n    from '../constants/orderConstants'\r\n\r\n\r\n    export const login = (email, password) => async (dispatch) => \r\n    {\r\n        try {\r\n            dispatch({\r\n                type: USER_LOGIN_REQUEST\r\n            })\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                }\r\n            }\r\n\r\n            const {data} = await axios.post(\r\n                '/api/users/login/', {'username': email, 'password': password},\r\n                config\r\n                )\r\n\r\n                dispatch({\r\n                    type: USER_LOGIN_SUCCESS,\r\n                    payload: data\r\n                })\r\n\r\n                localStorage.setItem('userInfo', JSON.stringify(data))\r\n                \r\n        } catch (error) {\r\n            dispatch({\r\n                type: USER_LOGIN_FAIL,\r\n                payload: error.response && error.response.data.detail \r\n                ? error.response.data.detail \r\n                : error.message\r\n            })\r\n        }\r\n    }\r\n\r\n    export const logout = () => (dispatch) => {\r\n        localStorage.removeItem('userInfo')\r\n        dispatch({type:USER_LOGOUT})\r\n        dispatch({type:USER_DETAILS_RESET})\r\n        dispatch({type:ORDER_LIST_MY_RESET})\r\n        dispatch({type:USER_LIST_RESET})\r\n\r\n    }\r\n\r\n\r\n    export const register = (name, email, password) => async (dispatch) => \r\n    {\r\n        try {\r\n            dispatch({\r\n                type: USER_REGISTER_REQUEST\r\n            })\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                }\r\n            }\r\n\r\n            const {data} = await axios.post(\r\n                '/api/users/register/', {'name' : name, 'email': email, 'password': password},\r\n                config\r\n                )\r\n\r\n                dispatch({\r\n                    type: USER_REGISTER_SUCCESS,\r\n                    payload: data\r\n                })\r\n                \r\n                dispatch({\r\n                    type: USER_LOGIN_SUCCESS,\r\n                    payload: data\r\n                })\r\n\r\n                localStorage.setItem('userInfo', JSON.stringify(data))\r\n                \r\n        } catch (error) {\r\n            dispatch({\r\n                type: USER_REGISTER_FAIL,\r\n                payload: error.response && error.response.data.detail \r\n                ? error.response.data.detail \r\n                : error.message\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    \r\n    export const getUserDetails = (id) => async (dispatch, getState) => \r\n    {\r\n        try {\r\n            dispatch({\r\n                type: USER_DETAILS_REQUEST\r\n            })\r\n\r\n            const {\r\n                userLogin: {userInfo},\r\n            } = getState()\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-type': 'application/json',  \r\n                    Authorization: `Bearer ${userInfo.token} `\r\n                }\r\n            }\r\n\r\n            const {data} = await axios.get(\r\n                `/api/users/${id}/`, \r\n                config\r\n                )\r\n\r\n                dispatch({\r\n                    type: USER_DETAILS_SUCCESS,\r\n                    payload: data\r\n                })\r\n\r\n                \r\n        } catch (error) {\r\n            dispatch({\r\n                type: USER_DETAILS_FAIL,\r\n                payload: error.response && error.response.data.detail \r\n                ? error.response.data.detail \r\n                : error.message\r\n            })\r\n        }\r\n    }\r\n\r\n    export const updateUserProfile = (user) => async (dispatch, getState) => \r\n    {\r\n        try {\r\n            dispatch({\r\n                type: USER_UPDATE_PROFILE_REQUEST\r\n            })\r\n\r\n            const {\r\n                userLogin: {userInfo},\r\n            } = getState()\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-type': 'application/json',  \r\n                    Authorization: `Bearer ${userInfo.token} `\r\n                }\r\n            }\r\n\r\n            const {data} = await axios.put(\r\n                `/api/users/profile/update/`, \r\n                user,\r\n                config\r\n                )\r\n\r\n                dispatch({\r\n                    type: USER_UPDATE_PROFILE_SUCCESS,\r\n                    payload: data\r\n                })\r\n\r\n                dispatch({\r\n                    type: USER_LOGIN_SUCCESS,\r\n                    payload: data\r\n                })\r\n\r\n            localStorage.setItem('userInfo', JSON.stringify(data))\r\n        } catch (error) {\r\n            dispatch({\r\n                type: USER_UPDATE_PROFILE_FAIL,\r\n                payload: error.response && error.response.data.detail \r\n                ? error.response.data.detail \r\n                : error.message\r\n            })\r\n        }\r\n    }\r\n\r\n    \r\n    export const listUsers = () => async (dispatch, getState) => \r\n    {\r\n        try {\r\n            dispatch({\r\n                type: USER_LIST_REQUEST\r\n            })\r\n\r\n            const {\r\n                userLogin: {userInfo},\r\n            } = getState()\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-type': 'application/json',  \r\n                    Authorization: `Bearer ${userInfo.token} `\r\n                }\r\n            }\r\n\r\n            const {data} = await axios.get(\r\n                `/api/users/`, \r\n                config\r\n                )\r\n\r\n                dispatch({\r\n                    type: USER_LIST_SUCCESS,\r\n                    payload: data\r\n                })\r\n\r\n        } catch (error) {\r\n            dispatch({\r\n                type: USER_LIST_FAIL,\r\n                payload: error.response && error.response.data.detail \r\n                ? error.response.data.detail \r\n                : error.message\r\n            })\r\n        }\r\n    }\r\n\r\n    export const deleteUser = (id) => async (dispatch, getState) => \r\n    {\r\n        try {\r\n            dispatch({\r\n                type: USER_DELETE_REQUEST\r\n            })\r\n\r\n            const {\r\n                userLogin: {userInfo},\r\n            } = getState()\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-type': 'application/json',  \r\n                    Authorization: `Bearer ${userInfo.token} `\r\n                }\r\n            }\r\n\r\n            const {data} = await axios.delete(\r\n                `/api/users/delete/${id}/`, \r\n                config\r\n                )\r\n\r\n                dispatch({\r\n                    type: USER_DELETE_SUCCESS,\r\n                    payload: data\r\n                })\r\n\r\n        } catch (error) {\r\n            dispatch({\r\n                type: USER_DELETE_FAIL,\r\n                payload: error.response && error.response.data.detail \r\n                ? error.response.data.detail \r\n                : error.message\r\n            })\r\n        }\r\n    }\r\n\r\n    export const updateUser = (user) => async (dispatch, getState) => \r\n    {\r\n        try {\r\n            dispatch({\r\n                type: USER_UPDATE_REQUEST\r\n            })\r\n\r\n            const {\r\n                userLogin: {userInfo},\r\n            } = getState()\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-type': 'application/json',  \r\n                    Authorization: `Bearer ${userInfo.token} `\r\n                }\r\n            }\r\n\r\n            const {data} = await axios.put(\r\n                `/api/users/update/${user._id}/`, \r\n                user,\r\n                config\r\n                )\r\n\r\n                dispatch({\r\n                    type: USER_UPDATE_SUCCESS,\r\n                    \r\n                })\r\n\r\n                dispatch({\r\n                    type: USER_DETAILS_SUCCESS,\r\n                    payload: data\r\n                    \r\n                })\r\n\r\n        } catch (error) {\r\n            dispatch({\r\n                type: USER_UPDATE_FAIL,\r\n                payload: error.response && error.response.data.detail \r\n                ? error.response.data.detail \r\n                : error.message\r\n            })\r\n        }\r\n    }","D:\\Django-React-Pro-Shop\\frontend\\src\\components\\FormContainer.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\RegisterScreen.js",["199"],"import React, {useState, useEffect} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {Form, Button, Row, Col} from 'react-bootstrap'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport {register} from '../actions/userActions'\r\n\r\nfunction RegisterScreen({location, history}) {\r\n\r\n    const  [name, setName] = useState('')\r\n    const  [email, setEmail] = useState('')\r\n    const  [password, setPassword] = useState('')\r\n    const  [confirmPassword, setConfirmPassword] = useState('')\r\n    const  [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    const userRegister = useSelector(state => state.userRegister)\r\n\r\n    const {error, loading, userInfo} = userRegister\r\n\r\n    useEffect(() => {\r\n        if(userInfo)\r\n        {\r\n            history.push(redirect)\r\n        }\r\n    }, [history, userInfo, redirect ])\r\n\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        if(password != confirmPassword)\r\n        {\r\n            setMessage('Passwords do not match!')\r\n        }\r\n        else\r\n        {\r\n            dispatch(register(name, email, password))\r\n\r\n        }\r\n\r\n    }\r\n    return (\r\n        <FormContainer>\r\n              <h1>Sign Up</h1>\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader/>}\r\n            <Form onSubmit={submitHandler}>\r\n           \r\n                <Form.Group controlId='name'>\r\n                        <Form.Label>\r\n                            Name\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                        required\r\n                        type=\"name\" \r\n                        placeholder=\"Enter Name\" \r\n                        value={name} \r\n                        onChange={(e) => setName(e.target.value)}>\r\n\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='email'>\r\n                        <Form.Label>\r\n                            Email Address\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                        required\r\n                        type=\"email\" \r\n                        placeholder=\"Enter Email\" \r\n                        value={email} \r\n                        onChange={(e) => setEmail(e.target.value)}>\r\n\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='password'>\r\n                        <Form.Label>\r\n                            Password\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                        required\r\n                        type=\"password\" \r\n                        placeholder=\"Enter Password\" \r\n                        value={password} \r\n                        onChange={(e) => setPassword(e.target.value)}>\r\n\r\n                        </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='passwordConfirm'>\r\n                        <Form.Label>\r\n                            Confirm Password\r\n                        </Form.Label>\r\n                        <Form.Control \r\n                        required\r\n                        type=\"password\" \r\n                        placeholder=\"Confirm Password\" \r\n                        value={confirmPassword} \r\n                        onChange={(e) => setConfirmPassword(e.target.value)}>\r\n\r\n                        </Form.Control>\r\n                </Form.Group>\r\n                <Button type='submit' variant='primary'>Register</Button>\r\n            </Form>\r\n            <Row className=\"py-3\">\r\n                <Col>\r\n                    Have an Account? \r\n                    <Link to={redirect ? `/login?redirect=${redirect}` : '/login'}>Sign In</Link>\r\n                </Col>\r\n            </Row>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default RegisterScreen\r\n","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\ProfileScreen.js",["200","201"],"import React, {useState, useEffect} from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nimport {Form, Button, Row, Col, Table} from 'react-bootstrap'\r\nimport {LinkContainer} from 'react-router-bootstrap'\r\n\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport {getUserDetails, updateUserProfile} from '../actions/userActions'\r\nimport {USER_UPDATE_PROFILE_RESET} from '../constants/userConstants'\r\nimport {listMyOrders} from '../actions/orderActions'\r\n\r\nfunction ProfileScreen({history}) {\r\n    const  [name, setName] = useState('')\r\n    const  [email, setEmail] = useState('')\r\n    const  [password, setPassword] = useState('')\r\n    const  [confirmPassword, setConfirmPassword] = useState('')\r\n    const  [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const {error, loading, user} = userDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n\r\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\r\n    const { success } = userUpdateProfile\r\n\r\n    const orderListMy = useSelector(state => state.orderListMy)\r\n    const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\r\n\r\n\r\n    useEffect(() => {\r\n        if(!userInfo)\r\n        {\r\n            history.push('/login')\r\n        }\r\n        else\r\n        {\r\n            if(!user || !user.name || success || userInfo._id !== user._id)\r\n            {\r\n                dispatch({type: USER_UPDATE_PROFILE_RESET })\r\n                dispatch(getUserDetails('profile'))\r\n                dispatch(listMyOrders())\r\n\r\n            }\r\n            else\r\n            {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n\r\n            }\r\n        }\r\n    }, [dispatch, history, userInfo, user, success ])\r\n\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        if(password != confirmPassword)\r\n        {\r\n            setMessage('Passwords do not match!')\r\n        }\r\n        else\r\n        {\r\n            dispatch(updateUserProfile({\r\n                'id': user._id,\r\n                'name': name,\r\n                'email': email,\r\n                'password': password\r\n            }))\r\n\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Row>\r\n            <Col md={3}>\r\n                <h2>User Profile</h2>\r\n                {message && <Message variant='danger'>{message}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader/>}\r\n            <Form onSubmit={submitHandler}>\r\n           \r\n                <Form.Group controlId='name'>\r\n                        <Form.Label>\r\n                            Name\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                        required\r\n                        type=\"name\" \r\n                        placeholder=\"Enter Name\" \r\n                        value={name} \r\n                        onChange={(e) => setName(e.target.value)}>\r\n\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='email'>\r\n                        <Form.Label>\r\n                            Email Address\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                        required\r\n                        type=\"email\" \r\n                        placeholder=\"Enter Email\" \r\n                        value={email} \r\n                        onChange={(e) => setEmail(e.target.value)}>\r\n\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='password'>\r\n                        <Form.Label>\r\n                            Password\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                        \r\n                        type=\"password\" \r\n                        placeholder=\"Enter Password\" \r\n                        value={password} \r\n                        onChange={(e) => setPassword(e.target.value)}>\r\n\r\n                        </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='passwordConfirm'>\r\n                        <Form.Label>\r\n                            Confirm Password\r\n                        </Form.Label>\r\n                        <Form.Control \r\n                        \r\n                        type=\"password\" \r\n                        placeholder=\"Confirm Password\" \r\n                        value={confirmPassword} \r\n                        onChange={(e) => setConfirmPassword(e.target.value)}>\r\n\r\n                        </Form.Control>\r\n                </Form.Group>\r\n                <Button type='submit' variant='primary'>Update</Button>\r\n            </Form>\r\n            </Col>\r\n\r\n            <Col md={9}>\r\n                <h2>My Orders</h2>\r\n                {loadingOrders ? (\r\n                    <Loader/>\r\n                ) : errorOrders ? (\r\n                    <Message variant='danger'>{errorOrders}</Message>\r\n                ) : (\r\n                    <Table striped responsive className='table-sm'>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>ID</th>\r\n                                <th>Date</th>\r\n                                <th>Total</th>\r\n                                <th>Paid</th>\r\n                                <th>Delivered</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {orders.map(order => (\r\n                                <tr key={order._id}>\r\n                                    <td>{order._id}</td>\r\n                                    <td>{order.createdAt.substring(0, 10)}</td>\r\n                                    <td>{order.totalPrice}</td>\r\n                                    <td>{order.isPaid ? order.paidAt : (\r\n                                        <i className='fas fa-times' style={{color: 'red'}}></i>\r\n                                    )}</td>\r\n                                    <td>     \r\n                                        <LinkContainer to={`/order/${order._id}`}>\r\n                                        <Button className='btn-sm'>\r\n                                            Details\r\n                                        </Button>\r\n                                        </LinkContainer>\r\n                                    </td>\r\n                                  \r\n                              \r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                )}\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen\r\n","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\ShippingScreen.js",["202"],"import React, {useState, useEffect} from 'react'\r\nimport {Form, Button} from 'react-bootstrap'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport FormContainer from '../components/FormContainer'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport {saveShippingAddress} from '../actions/cartActions'\r\n\r\n\r\nfunction ShippingScreen({history}) {\r\n   \r\n    const cart = useSelector(state => state.cart)\r\n    const {shippingAddress} = cart\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const  [address, setAddress] = useState(shippingAddress.address)\r\n    const  [city, setCity] = useState(shippingAddress.city)\r\n    const  [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\r\n    const  [country, setCountry] = useState(shippingAddress.country)\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(saveShippingAddress({address, city, postalCode, country }))\r\n        history.push('/payment')\r\n    }\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2/>\r\n            <h1>Shipping</h1>\r\n            <Form onSubmit={submitHandler}>\r\n\r\n               <Form.Group controlId='address'>\r\n                    <Form.Label>\r\n                        Address\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                    required\r\n                    type=\"text\" \r\n                    placeholder=\"Enter Address\" \r\n                    value={address ? address : ''} \r\n                    onChange={(e) => setAddress(e.target.value)}>\r\n\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='city'>\r\n                    <Form.Label>\r\n                        City\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                    required\r\n                    type=\"text\" \r\n                    placeholder=\"Enter City\" \r\n                    value={city ? city : ''} \r\n                    onChange={(e) => setCity(e.target.value)}>\r\n\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='postalCode'>\r\n                    <Form.Label>\r\n                        Postal Code \r\n                    </Form.Label>\r\n                    <Form.Control\r\n                    required\r\n                    type=\"text\" \r\n                    placeholder=\"Enter postal code\" \r\n                    value={postalCode ? postalCode : ''} \r\n                    onChange={(e) => setPostalCode(e.target.value)}>\r\n\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                \r\n                <Form.Group controlId='country'>\r\n                    <Form.Label>\r\n                        Country\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                    required\r\n                    type=\"text\" \r\n                    placeholder=\"Enter postal country\" \r\n                    value={country ? country : ''} \r\n                    onChange={(e) => setCountry(e.target.value)}>\r\n\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button type=\"submit\" variant=\"primary\">\r\n                    Continue\r\n                </Button>\r\n\r\n\r\n            </Form> \r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default ShippingScreen\r\n","D:\\Django-React-Pro-Shop\\frontend\\src\\components\\CheckoutSteps.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\PaymentScreen.js",["203"],"import React, {useState, useEffect} from 'react'\r\nimport {Form, Button, Col} from 'react-bootstrap'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport FormContainer from '../components/FormContainer'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport {savePaymentMethod} from '../actions/cartActions'\r\n\r\nfunction PaymentScreen({history}) {\r\n    const cart = useSelector(state => state.cart)\r\n    const {shippingAddress} = cart\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [paymentMethod, setPaymentMethod] = useState('PayPal')\r\n\r\n    if(!shippingAddress.address){\r\n        history.push('/shipping')\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(savePaymentMethod(paymentMethod))\r\n        history.push('/placeorder')\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2 step3/>\r\n            <Form onSubmit={submitHandler}>\r\n                <Form.Group>\r\n                    <Form.Label as='legend'>Select Payment Method</Form.Label>\r\n                    <Col>\r\n                        <Form.Check \r\n                            type='radio'\r\n                            label='Paypal or Credit Card'\r\n                            id='paypal'\r\n                            name='paymentMethod'\r\n                            checked\r\n                            onChange={(e) => setPaymentMethod(e.target.value) }\r\n                        >\r\n\r\n                        </Form.Check>\r\n                    </Col>\r\n                </Form.Group>\r\n                <Button type='submit' variant='primary'>\r\n                    Continue\r\n                </Button>\r\n            </Form>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default PaymentScreen\r\n","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\PlaceOrderScreen.js",["204","205"],"import React, {useState, useEffect} from 'react'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport {Link} from 'react-router-dom'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport {createOrder} from '../actions/orderActions'\r\nimport {ORDER_CREATE_RESET} from '../constants/orderConstants'\r\nfunction PlaceOrderScreen({history}) {\r\n\r\n    const orderCreate = useSelector(state => state.orderCreate)\r\n    const {order, error, success} = orderCreate\r\n\r\n    const dispatch = useDispatch()\r\n    const cart = useSelector(state => state.cart)\r\n\r\n  \r\n\r\n    cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\r\n    cart.shippingPrice = (cart.itemsPrice > 100 ? 0 : 10 ).toFixed(2)\r\n    cart.taxPrice = Number((0.082) * cart.itemsPrice).toFixed(2)\r\n    cart.totalPrice = Number(Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)).toFixed(2)\r\n\r\n    if(!cart.paymentMethod)\r\n    {\r\n        history.push('/payment')\r\n        dispatch({type: ORDER_CREATE_RESET})\r\n    }\r\n    useEffect(() => {\r\n        if(success)\r\n        {\r\n            history.push(`/order/${order._id}`)\r\n        }\r\n    }, [success, history])\r\n\r\n    const placeOrder = () => {\r\n        dispatch(createOrder({\r\n            orderItems:cart.cartItems,\r\n            shippingAddress:cart.shippingAddress,\r\n            paymentMethod:cart.paymentMethod,\r\n            itemsPrice:cart.itemsPrice, \r\n            shippingPrice:cart.shippingPrice,\r\n            taxPrice:cart.taxPrice,\r\n            totalPrice:cart.totalPrice\r\n\r\n        }))\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <CheckoutSteps step1 step2 step3 step4/>   \r\n            <Row>\r\n                 <Col md={8}>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n                            <p>\r\n                                <strong>Shipping: </strong>\r\n                                {cart.shippingAddress.address},\r\n                                {cart.shippingAddress.city},\r\n                                {''} \r\n                                {cart.shippingAddress.postalCode},\r\n                                {''} \r\n                                {cart.shippingAddress.country}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n                            <p>\r\n                                <strong>Method: </strong>\r\n                                {cart.paymentMethod}\r\n                         \r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                           {cart.cartItems.length === 0 ? <Message variant='info'>\r\n                                Your cart is empty\r\n                           </Message> : (\r\n                               <ListGroup variant='flush'>\r\n                                {cart.cartItems.map((item, index ) => (\r\n                                    <ListGroup.Item key={index}>\r\n                                        <Row>\r\n                                            <Col md={1}>\r\n                                                <Image src={item.image} alt={item.name} fluid rounded/>\r\n                                            </Col>\r\n                                            <Col>\r\n                                                <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                            </Col>\r\n                                            <Col md={4}>\r\n                                                {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n                                ))}\r\n                               </ListGroup>\r\n                           )}\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                 </Col>    \r\n                 <Col md={4}>\r\n                  <Card>\r\n\r\n                      <ListGroup variant='flush'>\r\n                            <ListGroup.Item>\r\n                                <h2>Order Summary</h2>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Item:</Col>\r\n                                    <Col>${cart.itemsPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Shipping:</Col>\r\n                                    <Col>${cart.shippingPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Tax:</Col>\r\n                                    <Col>${cart.taxPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Total:</Col>\r\n                                    <Col>${cart.totalPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                    {error && <Message variant='danger'>{error}</Message>}\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Button type='button'\r\n                                className='btn-block'\r\n                                disabled={cart.cartItems === 0}\r\n                                onClick={placeOrder}>\r\n                                    Place Order\r\n                                </Button>\r\n                            </ListGroup.Item>\r\n\r\n                      </ListGroup>\r\n                  </Card>\r\n                 </Col>    \r\n            </Row> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","D:\\Django-React-Pro-Shop\\frontend\\src\\reducers\\orderReducers.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\constants\\orderConstants.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\actions\\orderActions.js",["206","207","208"],"import axios from 'axios'\r\nimport {\r\n    ORDER_CREATE_REQUEST, \r\n    ORDER_CREATE_SUCCESS, \r\n    ORDER_CREATE_FAIL,\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n\r\n    ORDER_PAY_REQUEST,\r\n    ORDER_PAY_SUCCESS,\r\n    ORDER_PAY_FAIL,\r\n    ORDER_PAY_RESET,\r\n\r\n    ORDER_LIST_MY_REQUEST,\r\n    ORDER_LIST_MY_SUCCESS,\r\n    ORDER_LIST_MY_FAIL,\r\n    ORDER_LIST_MY_RESET,\r\n\r\n    ORDER_LIST_REQUEST,\r\n    ORDER_LIST_SUCCESS,\r\n    ORDER_LIST_FAIL,\r\n\r\n    ORDER_DELIVER_REQUEST,\r\n    ORDER_DELIVER_SUCCESS,\r\n    ORDER_DELIVER_FAIL,\r\n    ORDER_DELIVER_RESET,\r\n    \r\n} from '../constants/orderConstants'\r\n\r\nimport {CART_CLEAR_ITEMS} from '../constants/cartConstants'\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => \r\n{\r\n    try {\r\n        dispatch({\r\n            type: ORDER_CREATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo},\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',  \r\n                Authorization: `Bearer ${userInfo.token} `\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.post(\r\n            `/api/orders/add/`, \r\n            order,\r\n            config\r\n            )\r\n\r\n            dispatch({\r\n                type: ORDER_CREATE_SUCCESS,\r\n                payload: data\r\n            })\r\n\r\n            dispatch({\r\n                type: CART_CLEAR_ITEMS,\r\n                payload: data\r\n            })\r\n\r\n            localStorage.removeItem('cartItems')\r\n\r\n    \r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail \r\n            ? error.response.data.detail \r\n            : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const getOrderDetails = (id) => async (dispatch, getState) => \r\n{\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DETAILS_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo},\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',  \r\n                Authorization: `Bearer ${userInfo.token} `\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.get(\r\n            `/api/orders/${id}/`, \r\n            config\r\n            )\r\n\r\n            dispatch({\r\n                type: ORDER_DETAILS_SUCCESS,\r\n                payload: data\r\n            })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail \r\n            ? error.response.data.detail \r\n            : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const payOrder = (id, paymentResult) => async (dispatch, getState) => \r\n{\r\n    try {\r\n        dispatch({\r\n            type: ORDER_PAY_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo},\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',  \r\n                Authorization: `Bearer ${userInfo.token} `\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.put(\r\n            `/api/orders/${id}/pay/`, \r\n            paymentResult,\r\n            config\r\n            )\r\n\r\n            dispatch({\r\n                type: ORDER_PAY_SUCCESS,\r\n                payload: data\r\n            })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_PAY_FAIL,\r\n            payload: error.response && error.response.data.detail \r\n            ? error.response.data.detail \r\n            : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const deliverOrder = (order) => async (dispatch, getState) => \r\n{\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DELIVER_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo},\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',  \r\n                Authorization: `Bearer ${userInfo.token} `\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.put(\r\n            `/api/orders/${order._id}/deliver/`, \r\n            {},\r\n            config\r\n            )\r\n\r\n            dispatch({\r\n                type: ORDER_DELIVER_SUCCESS,\r\n                payload: data\r\n            })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_DELIVER_FAIL,\r\n            payload: error.response && error.response.data.detail \r\n            ? error.response.data.detail \r\n            : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const listMyOrders = () => async (dispatch, getState) => \r\n{\r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_MY_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo},\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',  \r\n                Authorization: `Bearer ${userInfo.token} `\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.get(\r\n            `/api/orders/myorders/`, \r\n            config\r\n            )\r\n\r\n            dispatch({\r\n                type: ORDER_LIST_MY_SUCCESS,\r\n                payload: data\r\n            })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_LIST_MY_FAIL,\r\n            payload: error.response && error.response.data.detail \r\n            ? error.response.data.detail \r\n            : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const listOrders = () => async (dispatch, getState) => \r\n{\r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo},\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',  \r\n                Authorization: `Bearer ${userInfo.token} `\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.get(\r\n            `/api/orders/`, \r\n            config\r\n            )\r\n\r\n            dispatch({\r\n                type: ORDER_LIST_SUCCESS,\r\n                payload: data\r\n            })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail \r\n            ? error.response.data.detail \r\n            : error.message\r\n        })\r\n    }\r\n}","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\OrderScreen.js",["209"],"import React, {useState, useEffect} from 'react'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport {Link} from 'react-router-dom'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {PayPalButton} from 'react-paypal-button-v2'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport {ORDER_PAY_RESET, ORDER_DELIVER_RESET} from '../constants/orderConstants'\r\n\r\nimport {getOrderDetails, payOrder, deliverOrder} from '../actions/orderActions'\r\n\r\nfunction OrderScreen({match, history}) {\r\n\r\n    const orderId = match.params.id\r\n    const dispatch = useDispatch()\r\n\r\n    const [sdkReady, setSdkReady] = useState(false)\r\n\r\n    const orderDetails= useSelector(state => state.orderDetails)\r\n    const {order, error, loading} = orderDetails\r\n\r\n    const orderPay= useSelector(state => state.orderPay)\r\n    const { loading: loadingPay, success: successPay} = orderPay\r\n\r\n    const orderDeliver= useSelector(state => state.orderDeliver)\r\n    const { loading: loadingDeliver, success: successDeliver} = orderDeliver\r\n\r\n    \r\n    const userLogin= useSelector(state => state.userLogin)\r\n    const {userInfo} = userLogin\r\n\r\n\r\n    if(!loading && !error)\r\n    {\r\n        order.itemsPrice = order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\r\n\r\n    }\r\n   \r\n\r\n    //ATNHAVaTFx8pNPCr9IIx6jQumb9eg5MwB7uc1A55vSnGiFkhLzaXk0NgCYF5l-_DMDHC9zkvZJRBLIHm\r\n\r\n    const addPayPalScript = () => {\r\n        const script = document.createElement('script')\r\n        script.type = 'text/javascript'\r\n        script.src =\"https://www.paypal.com/sdk/js?client-id=ATNHAVaTFx8pNPCr9IIx6jQumb9eg5MwB7uc1A55vSnGiFkhLzaXk0NgCYF5l-_DMDHC9zkvZJRBLIHm\"\r\n        script.async = true \r\n        script.onload = () => {\r\n            setSdkReady(true)\r\n        }\r\n\r\n        document.body.appendChild(script)\r\n    }\r\n    useEffect(() => {\r\n\r\n        if(!userInfo)\r\n        {\r\n            history.push('/login')\r\n        }\r\n\r\n        if(!order ||  successPay || order._id !== Number(orderId) || successDeliver)\r\n        {\r\n            dispatch({type: ORDER_PAY_RESET})\r\n            dispatch({type: ORDER_DELIVER_RESET})\r\n\r\n            dispatch(getOrderDetails(orderId))\r\n        }\r\n        else if(!order.isPaid)\r\n        {\r\n            if(!window.paypal)\r\n            {\r\n                addPayPalScript()\r\n            }\r\n            else\r\n            {\r\n                setSdkReady(true)\r\n    \r\n            }\r\n        }\r\n      \r\n    }, [dispatch, order, orderId, successPay, successDeliver])\r\n\r\n    const successPaymentHandler = (paymentResult) => \r\n    {\r\n        dispatch(payOrder(orderId, paymentResult))\r\n    }\r\n\r\n    const deliverHandler = () => \r\n    {\r\n        dispatch(deliverOrder(order))\r\n    }\r\n   \r\n    return loading ? (\r\n        <Loader/>\r\n    ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n    ) : (\r\n        <div>\r\n            <h1>Order: {order._id}</h1>\r\n            <Row>\r\n                 <Col md={8}>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n                            <p>\r\n                                <strong>Name: </strong>{order.user.name}\r\n                            </p>\r\n                            <p>\r\n                                <strong>Email: </strong><a href={`mailto:${order.user.email}`}>{order.user.email}</a>\r\n                            </p>\r\n                            <p>\r\n                                <strong>Shipping: </strong>\r\n                                {order.shippingAddress.address},\r\n                                {order.shippingAddress.city},\r\n                                {''} \r\n                                {order.shippingAddress.postalCode},\r\n                                {''} \r\n                                {order.shippingAddress.country}\r\n                            </p>\r\n\r\n                            {order.isDelivered ? (\r\n                                <Message variant='success'>Delivered on {order.deliveredAt}</Message>\r\n                            ) : (\r\n                                <Message variant='warning'>Not Delivered</Message>\r\n\r\n                            )} \r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n                            <p>\r\n                                <strong>Method: </strong>\r\n                                {order.paymentMethod}\r\n                            </p>\r\n                            {order.isPaid ? (\r\n                                <Message variant='success'>Paid on {order.paidAt}</Message>\r\n                            ) : (\r\n                                <Message variant='warning'>Not Paid {order.paidAt}</Message>\r\n\r\n                            )} \r\n\r\n                           \r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                           {order.orderItems.length === 0 ? <Message variant='info'>\r\n                                Your cart is empty\r\n                           </Message> : (\r\n                               <ListGroup variant='flush'>\r\n                                {order.orderItems.map((item, index ) => (\r\n                                    <ListGroup.Item key={index}>\r\n                                        <Row>\r\n                                            <Col md={1}>\r\n                                                <Image src={item.image} alt={item.name} fluid rounded/>\r\n                                            </Col>\r\n                                            <Col>\r\n                                                <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                            </Col>\r\n                                            <Col md={4}>\r\n                                                {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n                                ))}\r\n                               </ListGroup>\r\n                           )}\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                 </Col>    \r\n                 <Col md={4}>\r\n                  <Card>\r\n\r\n                      <ListGroup variant='flush'>\r\n                            <ListGroup.Item>\r\n                                <h2>Order Summary</h2>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Item:</Col>\r\n                                    <Col>${order.itemsPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Shipping:</Col>\r\n                                    <Col>${order.shippingPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Tax:</Col>\r\n                                    <Col>${order.taxPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Total:</Col>\r\n                                    <Col>${order.totalPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            {!order.isPaid && (\r\n                                <ListGroup.Item>\r\n                                    {loadingPay && <Loader/>}\r\n                                    {!sdkReady ? (\r\n                                        <Loader/>\r\n                                    ) : (\r\n                                        <PayPalButton\r\n                                            amount={order.totalPrice}\r\n                                            onSuccess={successPaymentHandler}\r\n                                        />\r\n                                    )}\r\n                                </ListGroup.Item>\r\n                            )}\r\n\r\n        \r\n\r\n                      </ListGroup>\r\n\r\n                      {loadingDeliver && <Loader/>}\r\n\r\n                      {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\r\n                          <ListGroup.Item>\r\n                              <Button\r\n                              type='button'\r\n                              className='btn btn-block'\r\n                              onClick={deliverHandler}>\r\n                                  Mark As Deliver\r\n                              </Button>\r\n                          </ListGroup.Item>\r\n                      )}\r\n                  </Card>\r\n                 </Col>    \r\n            </Row> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderScreen","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\UserListScreen.js",["210"],"import React, {useState, useEffect} from 'react'\r\nimport {LinkContainer} from 'react-router-bootstrap'\r\nimport {Table, Button} from 'react-bootstrap'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport {listUsers, deleteUser} from '../actions/userActions'\r\n\r\nfunction UserListScreen({history}) {\r\n    const dispatch = useDispatch()\r\n\r\n    const userList = useSelector(state => state.userList)\r\n    const {loading, error, users} = userList \r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {userInfo} = userLogin \r\n\r\n    const userDelete = useSelector(state => state.userDelete)\r\n    const {success:successDelete} = userDelete\r\n\r\n\r\n    useEffect(() => {\r\n        if(userInfo && userInfo.isAdmin)\r\n        {\r\n            dispatch(listUsers())\r\n        }\r\n        else\r\n        {\r\n            history.push('/login')\r\n        }\r\n        dispatch(listUsers())\r\n    }, [dispatch, history, successDelete, userInfo])\r\n\r\nconst deleteHandler = (id) => {\r\n\r\n    if(window.confirm('Are you sure you want to delete this user?'))\r\n    {\r\n        dispatch(deleteUser(id))\r\n    }   \r\n   \r\n}\r\n\r\n    return (\r\n        <div>\r\n        <h1> Users </h1>\r\n        { loading ?\r\n        (<Loader/>)\r\n         : error \r\n          ? (<Message variant='danger'>{error}</Message>)\r\n        : (\r\n            <Table striped bordered hover responsive className='table-sm'>\r\n                <thead>\r\n                    <th>ID</th>\r\n                    <th>Name</th>\r\n                    <th>Email</th>\r\n                    <th>Admin</th>\r\n                </thead>\r\n                <tbody>\r\n                    {users.map(user => (\r\n                        <tr key={user._id}>\r\n                            <td>{user._id}</td>\r\n                            <td>{user.name}</td>\r\n                            <td>{user.email}</td>\r\n                            <td>{user.isAdmin ? (\r\n                                <i className='fas fa-check' style={{color: 'green'}}></i>\r\n                            ) : (\r\n                                <i className=\"fas fa-check\" style={{color: 'red'}}></i>\r\n                            )}</td>\r\n                            <td>\r\n                                <LinkContainer to={`/admin/user/${user._id}/edit`}>\r\n                                    <Button variant='light' className='btn-sm'>\r\n                                        <i className=\"fas fa-edit\"></i>                                       \r\n                                  </Button>\r\n                                </LinkContainer>\r\n\r\n                                <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(user._id)}>\r\n                                        <i className=\"fas fa-trash\"></i>                                       \r\n                                  </Button>\r\n\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserListScreen\r\n","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\UserEditScreen.js",["211"],"import React, {useState, useEffect} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {Form, Button} from 'react-bootstrap'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport {getUserDetails, updateUser} from '../actions/userActions'\r\nimport {USER_UPDATE_RESET} from '../constants/userConstants'\r\n\r\nfunction UserEditScreen({match, history}) {\r\n\r\n    const userId = match.params.id\r\n\r\n    const  [name, setName] = useState('')\r\n    const  [email, setEmail] = useState('')\r\n    const  [isAdmin, setIsAdmin] = useState(false)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const {error, loading, user} = userDetails\r\n\r\n    const userUpdate = useSelector(state => state.userUpdate)\r\n    const {error:errorUpdate, loading:loadingUpdate, success:successUpdate} = userUpdate\r\n\r\n    useEffect(() => {\r\n\r\n        if(successUpdate)\r\n        {\r\n            dispatch({type: USER_UPDATE_RESET})\r\n            history.push('/admin/userlist')     \r\n        }\r\n        else\r\n        {\r\n            if(!user.name || user._id !== Number(userId))\r\n            {\r\n                dispatch(getUserDetails(userId))\r\n            }\r\n            else \r\n            {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n                setIsAdmin(user.isAdmin)\r\n            }\r\n        }\r\n       \r\n    }, [user, userId, successUpdate, history])\r\n\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateUser({_id: user._id, name, email, isAdmin }))\r\n       \r\n\r\n    }\r\n    return (\r\n    \r\n        <div>\r\n            <Link to='/admin/userlist'>\r\n                Go Back\r\n            </Link>\r\n             <FormContainer>\r\n              <h1>Edit User</h1>\r\n              {loadingUpdate && <Loader/>}\r\n              {errorUpdate && <Message variant='danger'>{errorUpdate}</Message> }\r\n              {loading ? <Loader/> : error ? <Message variant='danger'>{error}</Message> : (\r\n                   <Form onSubmit={submitHandler}>\r\n           \r\n                   <Form.Group controlId='name'>\r\n                           <Form.Label>\r\n                               Name\r\n                           </Form.Label>\r\n                           <Form.Control                      \r\n                           type=\"name\" \r\n                           placeholder=\"Enter Name\" \r\n                           value={name} \r\n                           onChange={(e) => setName(e.target.value)}>\r\n   \r\n                           </Form.Control>\r\n                       </Form.Group>\r\n   \r\n                       <Form.Group controlId='email'>\r\n                           <Form.Label>\r\n                               Email Address\r\n                           </Form.Label>\r\n                           <Form.Control                       \r\n                           type=\"email\" \r\n                           placeholder=\"Enter Email\" \r\n                           value={email} \r\n                           onChange={(e) => setEmail(e.target.value)}>\r\n   \r\n                           </Form.Control>\r\n                       </Form.Group>\r\n   \r\n                       <Form.Group controlId='isadmin'>\r\n                           <Form.Check\r\n                           type=\"checkbox\" \r\n                           label=\"is Admin\" \r\n                           checked={isAdmin}\r\n                           onChange={(e) => setIsAdmin(e.target.checked)}>\r\n   \r\n                           </Form.Check>\r\n                   </Form.Group>\r\n   \r\n                   <Button type='submit' variant='primary'>Update</Button>\r\n               </Form>\r\n              )}\r\n           \r\n  \r\n        </FormContainer>\r\n\r\n        </div>\r\n\r\n       \r\n    )\r\n}\r\n\r\nexport default UserEditScreen\r\n","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\ProductListScreen.js",["212"],"import React, {useState, useEffect} from 'react'\r\nimport {LinkContainer} from 'react-router-bootstrap'\r\nimport {Table, Button, Row, Col} from 'react-bootstrap'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Paginate from '../components/Paginate'\r\nimport {listProducts, deleteProduct, createProduct} from '../actions/productActions'\r\nimport {PRODUCT_CREATE_RESET} from '../constants/productConstants'\r\n\r\nfunction ProductListScreen({history, match}) {\r\n    const dispatch = useDispatch()\r\n\r\n    const productList = useSelector(state => state.productList)\r\n    const {loading, error, products, pages, page } = productList \r\n\r\n    const productDelete = useSelector(state => state.productDelete)\r\n    const {loading:loadingDelete, error:errorDelete, success:successDelete} = productDelete \r\n\r\n    const productCreate= useSelector(state => state.productCreate)\r\n    const {loading:loadingCreate, error:errorCreate, success:successCreate, product: createdProduct} = productCreate \r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {userInfo} = userLogin \r\n\r\n    let keyword = history.location.search\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch({type: PRODUCT_CREATE_RESET})\r\n\r\n        if(!userInfo.isAdmin)\r\n        {\r\n            history.push('/login')\r\n        }\r\n        if(successCreate)\r\n        {\r\n            history.push(`/admin/product/${createdProduct._id}/edit`)\r\n\r\n        }\r\n        else\r\n        {\r\n            dispatch(listProducts(keyword))\r\n        }\r\n    }, [dispatch, history, userInfo, successDelete, successCreate, createdProduct, keyword])\r\n\r\nconst deleteHandler = (id) => {\r\n\r\n    if(window.confirm('Are you sure you want to delete this product?'))\r\n    {\r\n        dispatch(deleteProduct(id))\r\n    }   \r\n   \r\n}\r\n\r\n    const createProductHandler = () => {\r\n        dispatch(createProduct())\r\n    }\r\n    return (\r\n        <div>\r\n            <Row className='align-items-center'>\r\n                <Col>\r\n                    <h1>Products</h1>\r\n                </Col>\r\n                <Col className='text-right'>\r\n                    <Button className='my-3' onClick={createProductHandler}>\r\n                        <i class=\"fa fa-plus\" aria-hidden=\"true\"></i> Create Product\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n\r\n        {loadingDelete && <Loader/>}\r\n        {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\r\n\r\n        {loadingCreate && <Loader/>}\r\n        {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\r\n\r\n        { loading ?\r\n        (<Loader/>)\r\n         : error \r\n          ? (<Message variant='danger'>{error}</Message>)\r\n        : (\r\n            <div>\r\n            <Table striped bordered hover responsive className='table-sm'>\r\n                <thead>\r\n                    <th>ID</th>\r\n                    <th>Name</th>\r\n                    <th>Price</th>\r\n                    <th>Category</th>\r\n                    <th>Brand</th>\r\n\r\n                </thead>\r\n                <tbody>\r\n                    {products.map(product => (\r\n                        <tr key={product._id}>\r\n                            <td>{product._id}</td>\r\n                            <td>{product.name}</td>\r\n                            <td>{product.price}</td>\r\n                            <td>{product.category}</td>\r\n                            <td>{product.brand}</td>\r\n\r\n                            <td>\r\n                                <LinkContainer to={`/admin/product/${product._id}/edit`}>\r\n                                    <Button variant='light' className='btn-sm'>\r\n                                        <i className=\"fas fa-edit\"></i>                                       \r\n                                  </Button>\r\n                                </LinkContainer>\r\n\r\n                                <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(product._id)}>\r\n                                        <i className=\"fas fa-trash\"></i>                                       \r\n                                  </Button>\r\n\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n            <Paginate pages={pages} page={page} isAdmin={true}/>\r\n            </div>\r\n        )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductListScreen\r\n","D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\ProductEditScreen.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\screens\\OrderListScreen.js",["213"],"import React, {useState, useEffect} from 'react'\r\nimport {LinkContainer} from 'react-router-bootstrap'\r\nimport {Table, Button} from 'react-bootstrap'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport {listOrders} from '../actions/orderActions'\r\n\r\nfunction OrderListScreen({history}) {\r\n    const dispatch = useDispatch()\r\n\r\n    const orderList = useSelector(state => state.orderList)\r\n    const {loading, error, orders} = orderList \r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {userInfo} = userLogin \r\n\r\n\r\n    useEffect(() => {\r\n        if(userInfo && userInfo.isAdmin)\r\n        {\r\n            dispatch(listOrders())\r\n        }\r\n        else\r\n        {\r\n            history.push('/login')\r\n        }\r\n    }, [dispatch, history, userInfo])\r\n\r\n\r\n    return (\r\n        <div>\r\n        <h1> Orders </h1>\r\n        { loading ?\r\n        (<Loader/>)\r\n         : error \r\n          ? (<Message variant='danger'>{error}</Message>)\r\n        : (\r\n            <Table striped bordered hover responsive className='table-sm'>\r\n                <thead>\r\n                    <tr>\r\n                    <th>ID</th>\r\n                    <th>USER</th>\r\n                    <th>DATE</th>\r\n                    <th>TOTAL</th>\r\n                    <th>PAID</th>\r\n                    <th>DELIVERED</th>\r\n                    <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {orders.map(order => (\r\n                        <tr key={order._id}>\r\n                            <td>{order._id}</td>\r\n                            <td>{order.user && order.user.name}</td>\r\n                            <td>{order.createdAt.substring(0, 10)}</td>\r\n                            <td>${order.totalPrice}</td>\r\n\r\n                            <td>{order.isPaid ? (\r\n                                order.paidAt.substring(0, 10)\r\n                            ) : (\r\n                                <i className=\"fas fa-check\" style={{color: 'red'}}></i>\r\n                            )\r\n                            }</td>\r\n                           \r\n\r\n                            <td>{order.isDelivered ? (\r\n                                order.deliveredAt.substring(0, 10)\r\n                            ) : (\r\n                                <i className=\"fas fa-check\" style={{color: 'red'}}></i>\r\n                            )}\r\n                            </td>\r\n                           \r\n                           \r\n                            <td>\r\n                                <LinkContainer to={`/order/${order._id}`}>\r\n                                    <Button variant='light' className='btn-sm'>\r\n                                        Details                              \r\n                                  </Button>\r\n                                </LinkContainer>\r\n\r\n                           \r\n                         </td>\r\n                      \r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderListScreen\r\n","D:\\Django-React-Pro-Shop\\frontend\\src\\components\\SearchBox.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\components\\Paginate.js",[],"D:\\Django-React-Pro-Shop\\frontend\\src\\components\\ProductCarousel.js",[],{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","replacedBy":"217"},{"ruleId":"218","severity":1,"message":"219","line":3,"column":33,"nodeType":"220","messageId":"221","endLine":3,"endColumn":36},{"ruleId":"218","severity":1,"message":"222","line":1,"column":16,"nodeType":"220","messageId":"221","endLine":1,"endColumn":24},{"ruleId":"214","replacedBy":"223"},{"ruleId":"216","replacedBy":"224"},{"ruleId":"218","severity":1,"message":"225","line":70,"column":7,"nodeType":"220","messageId":"221","endLine":70,"endColumn":17},{"ruleId":"218","severity":1,"message":"226","line":121,"column":16,"nodeType":"220","messageId":"221","endLine":121,"endColumn":20},{"ruleId":"218","severity":1,"message":"227","line":21,"column":5,"nodeType":"220","messageId":"221","endLine":21,"endColumn":30},{"ruleId":"228","severity":1,"message":"229","line":37,"column":21,"nodeType":"230","messageId":"231","endLine":37,"endColumn":23},{"ruleId":"218","severity":1,"message":"232","line":2,"column":9,"nodeType":"220","messageId":"221","endLine":2,"endColumn":13},{"ruleId":"228","severity":1,"message":"229","line":64,"column":21,"nodeType":"230","messageId":"231","endLine":64,"endColumn":23},{"ruleId":"218","severity":1,"message":"233","line":1,"column":26,"nodeType":"220","messageId":"221","endLine":1,"endColumn":35},{"ruleId":"218","severity":1,"message":"233","line":1,"column":26,"nodeType":"220","messageId":"221","endLine":1,"endColumn":35},{"ruleId":"218","severity":1,"message":"222","line":1,"column":16,"nodeType":"220","messageId":"221","endLine":1,"endColumn":24},{"ruleId":"234","severity":1,"message":"235","line":34,"column":8,"nodeType":"236","endLine":34,"endColumn":26,"suggestions":"237"},{"ruleId":"218","severity":1,"message":"238","line":13,"column":5,"nodeType":"220","messageId":"221","endLine":13,"endColumn":20},{"ruleId":"218","severity":1,"message":"239","line":18,"column":5,"nodeType":"220","messageId":"221","endLine":18,"endColumn":24},{"ruleId":"218","severity":1,"message":"240","line":27,"column":5,"nodeType":"220","messageId":"221","endLine":27,"endColumn":24},{"ruleId":"234","severity":1,"message":"241","line":80,"column":8,"nodeType":"236","endLine":80,"endColumn":62,"suggestions":"242"},{"ruleId":"218","severity":1,"message":"222","line":1,"column":16,"nodeType":"220","messageId":"221","endLine":1,"endColumn":24},{"ruleId":"234","severity":1,"message":"243","line":49,"column":8,"nodeType":"236","endLine":49,"endColumn":46,"suggestions":"244"},{"ruleId":"218","severity":1,"message":"222","line":1,"column":16,"nodeType":"220","messageId":"221","endLine":1,"endColumn":24},{"ruleId":"218","severity":1,"message":"222","line":1,"column":16,"nodeType":"220","messageId":"221","endLine":1,"endColumn":24},"no-native-reassign",["245"],"no-negated-in-lhs",["246"],"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.",["245"],["246"],"'middleware' is assigned a value but never used.","'data' is assigned a value but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Link' is defined but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.","ArrayExpression",["247"],"'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["248"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["249"],"no-global-assign","no-unsafe-negation",{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},"Update the dependencies array to be: [success, history, order._id]",{"range":"256","text":"257"},"Update the dependencies array to be: [dispatch, order, orderId, successPay, successDeliver, userInfo, history]",{"range":"258","text":"259"},"Update the dependencies array to be: [user, userId, successUpdate, history, dispatch]",{"range":"260","text":"261"},[1297,1315],"[success, history, order._id]",[2501,2555],"[dispatch, order, orderId, successPay, successDeliver, userInfo, history]",[1531,1569],"[user, userId, successUpdate, history, dispatch]"]